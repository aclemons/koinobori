---

name: Build and push docker image

on:
  push:
    branches: master

env:
  AWS_DEFAULT_REGION: eu-central-1
  SESSION_DURATION: 900
  # renovate: datasource=docker depName=tonistiigi/binfmt versioning=loose
  BINFMT_IMAGE: qemu-v9.2.0@sha256:ea2f0dd74e74f101df59f9a6b31d0960994060c7982a921cbceecee0f1841125

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: false


jobs:
  docker:
    name: Build and push
    runs-on: ubuntu-24.04
    permissions:
      id-token: write
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Compute git sha
        run: echo "DOCKER_IMAGE_VERSION=git$(git rev-parse --short HEAD)" >> "$GITHUB_ENV"

      - name: Set up QEMU
        uses: docker/setup-qemu-action@29109295f81e9208d7d86ff1c6c12d2833863392 # v3.6.0
        with:
          image: tonistiigi/binfmt:${{ env.BINFMT_IMAGE }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@a03048d87541d1d9fcf2ecf528a4a65ba9bd7838 # v5.0.0
        with:
          aws-region: ${{ env.AWS_DEFAULT_REGION }}
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/koinobori-automation
          role-duration-seconds: ${{ env.SESSION_DURATION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@062b18b96a7aff071d4dc91bc00c4c1a7945b076 # v2.0.1
        with:
          mask-password: 'true'

      - name: Build and push
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6.18.0
        with:
          push: true
          platforms: linux/arm64/v8
          cache-from: type=gha
          cache-to: type=gha,mode=max
          context: .
          file: docker/koinobori/Dockerfile
          provenance: false
          tags: |
            ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_DEFAULT_REGION }}.amazonaws.com/koinobori/dev:latest
            ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_DEFAULT_REGION }}.amazonaws.com/koinobori/dev:${{ env.DOCKER_IMAGE_VERSION }}

      - name: Update lambdas
        run: |
          aws lambda update-function-code --function-name koinobori-dev-migrations --image-uri ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_DEFAULT_REGION }}.amazonaws.com/koinobori/dev:latest
          aws lambda wait function-active --function-name koinobori-dev-migrations

          aws lambda invoke --cli-read-timeout 0 --function-name koinobori-dev-migrations _response.json

          cat _response.json
          rm _response.json

          aws lambda wait function-active --function-name koinobori-dev-api
          aws lambda update-function-code --function-name koinobori-dev-api --image-uri ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_DEFAULT_REGION }}.amazonaws.com/koinobori/dev:latest

      - name: Test lambda
        run: |
          url="$(aws lambda get-function-url-config --function koinobori-dev-api | jq -r .FunctionUrl)"
          output="$(curl -s -f "$url"/v1/ping)"

          if [[ "$output" != "🎏" ]] ; then
            2>&1 printf 'API returned unexpected response: %s\n' "$output"
            exit 1
          fi
